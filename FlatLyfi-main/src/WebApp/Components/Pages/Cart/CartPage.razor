@page "/cart"
@inject NavigationManager Nav
@inject BasketState Basket
@inject IProductImageUrlProvider ProductImages
@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>Корзина сравнения | FlatLyfi</PageTitle>
<SectionContent SectionName="page-header-title">Корзина сравнения</SectionContent>

<div class='cart'>
    @if (basketItems is null)
    {
        <p>Loading...</p>
    }
    else if (basketItems.Count == 0)
    {
        <p>
            Ничего не добавлено к сравнению. <a href="">Продолжить поиск квартиры.</a>
        </p>
    }
    else
    {
        <div class='cart-items'>
            <div class='cart-item-header'>
                <div class='catalog-item-info'><h2>Квартиры</h2></div>
            </div>
            @foreach (var item in basketItems)
            {
                var quantity = CurrentOrPendingQuantity(item.ProductId, item.Quantity);
                <div class="cart-item" @key="@item.Id">
                    <div class="catalog-item-info">
                        <img alt="@item.ProductName" src="@ProductImages.GetProductImageUrl(item.ProductId)" />
                        <div class="catalog-item-content">
                            <p class="name">@item.ProductName</p>
                            <p class="price">@item.UnitPrice.ToString() ₽</p>
                        </div>
                    </div>
                    <div class="catalog-item-quantity">
                        <form method="post" data-enhance>
                            <input type="hidden" name="_handler" value="update-cart" />
                            <AntiforgeryToken />
                            <input style="display: none;" aria-label="product quantity" type="number" name="UpdateQuantityValue" value="@quantity" min="0" />
                            <button type="submit" 
                                    class="button button-secondary"
                                    name="UpdateQuantityId" 
                                    value="@item.ProductId">
                                Удалить
                            </button>
                        </form>
                    </div>
                </div>
            }
        </div>
       

        <div class="cart-summary">
            <div class="cart-summary-container">
                <div class="cart-summary-header">
                    <img role="presentation" src="icons/cart.svg" />
                    Сравнения
                    <span class="filter-badge">@TotalQuantity</span>
                </div>
                <a href="favourites" class="button button-primary">Сравнить</a>
                <a href="" class="cart-summary-link">
                    <img role="presentation" src="icons/arrow-left.svg" />
                    <p>Продолжить поиск квартиры</p>
                </a>
            </div>
        </div>
    }
</div>

<form @formname="update-cart" @onsubmit="@UpdateQuantityAsync"></form>

@code {
    private IReadOnlyCollection<BasketItem>? basketItems;

    [SupplyParameterFromForm]
    public int? UpdateQuantityId { get; set; }

    [SupplyParameterFromForm]
    public int? UpdateQuantityValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        basketItems = await Basket.GetBasketItemsAsync();
    }

    private decimal? TotalPrice => basketItems?.Sum(i => i.Quantity * i.UnitPrice);
    private decimal? TotalQuantity => basketItems?.Sum(i => i.Quantity);

    // While an update post is in process, we want to show the pending quantity, not the one
    // that is committed to the cart (otherwise the UI briefly shows the old data)
    private int CurrentOrPendingQuantity(int productId, int cartQuantity)
        => UpdateQuantityId.GetValueOrDefault(-1) == productId
        ? UpdateQuantityValue!.Value
        : cartQuantity;

    private async Task UpdateQuantityAsync()
    {
        var id = UpdateQuantityId!.Value;
        var quantity = 0;
        await Basket.SetQuantityAsync(id, quantity);
        basketItems = await Basket.GetBasketItemsAsync();
    }
}
