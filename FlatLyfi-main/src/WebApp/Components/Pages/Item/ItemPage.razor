@page "/item/{itemId:int}"
@using System.Net
@inject CatalogService CatalogService
@inject BasketState BasketState
@inject NavigationManager Nav
@inject IProductImageUrlProvider ProductImages

@if (item is not null)
{
    <PageTitle>@item.Name | FlatLyfi</PageTitle>

    <div class="item-details">
        <div>
            <h1>@item.Name</h1>

            <div>
                <form class="add-to-cart" method="post" @formname="add-to-cart" @onsubmit="@AddToCartAsync" data-enhance="@isLoggedIn">
                    <AntiforgeryToken />
                    <span class="price">@item.Price&nbsp;₽</span>

                    @if (isLoggedIn)
                    {
                        <button type="submit" title="Добавить к сравнению">
							<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M1.24264 8.24264L8 15L14.7574 8.24264C15.553 7.44699 16 6.36786 16 5.24264V5.05234C16 2.8143 14.1857 1 11.9477 1C10.7166 1 9.55233 1.55959 8.78331 2.52086L8 3.5L7.21669 2.52086C6.44767 1.55959 5.28338 1 4.05234 1C1.8143 1 0 2.8143 0 5.05234V5.24264C0 6.36786 0.44699 7.44699 1.24264 8.24264Z" fill="#ffffff" transform="translate(2, 2)" />
							</svg>


                            Добавить к сравнению
                        </button>
                    }
                    else
                    {
                        <button type="submit" title="Войдите, чтобы добавить к сравнению">
							<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M1.24264 8.24264L8 15L14.7574 8.24264C15.553 7.44699 16 6.36786 16 5.24264V5.05234C16 2.8143 14.1857 1 11.9477 1C10.7166 1 9.55233 1.55959 8.78331 2.52086L8 3.5L7.21669 2.52086C6.44767 1.55959 5.28338 1 4.05234 1C1.8143 1 0 2.8143 0 5.05234V5.24264C0 6.36786 0.44699 7.44699 1.24264 8.24264Z" fill="#ffffff" transform="translate(2, 2)" />
							</svg>

                            Войдите, чтобы добавить к сравнению
                        </button>
                    }
                </form>

                @if (numInCart > 0)
                {
                    <p><strong>@numInCart</strong> в <a href="cart">корзине сравнения</a></p>
                }
            </div>

            <img alt="@item.Name" src="@ProductImages.GetProductImageUrl(item)" />
           <div id="map" style="width: 600px; height: 400px"></div>
           <script>
    window.mapHint = '@item.Name'.replace(/'/g, "\\'");
    window.mapBalloon = '@item.Description'.replace(/'/g, "\\'");
    window.mapCenter = [@item.Latitude.ToString(System.Globalization.CultureInfo.InvariantCulture), @item.Longitude.ToString(System.Globalization.CultureInfo.InvariantCulture)];
</script>
	        <script src="https://api-maps.yandex.ru/2.1/?apikey=<API_KEY>&lang=ru_RU"> // Replace <API_KEY> with your actual Yandex Maps API key
	        </script>
	        <script src="yandex-map.js"></script>
        </div>

        <div class="description">
            <h2>О квартире</h2>
            <ul>
                <li><span>Количество комнат</span><span>: </span>@item.NumberOfRooms</li>
                <li>
                    <span>Общая площадь</span><span>: </span>@(item.TotalFloorArea == "не указано" ? "не указано" : item.TotalFloorArea + "\u00A0м²")
                </li>
                <li>
                    <span>Площадь кухни</span><span>: </span>@(item.KitchenArea == "не указано" ? "не указано" : item.KitchenArea + "\u00A0м²")
                </li>
                <li>
                    <span>Жилая площадь</span><span>: </span>@(item.LivingArea == "не указано" ? "не указано" : item.LivingArea + "\u00A0м²")
                </li>
                <li><span>Этаж</span><span>: </span>@item.Floor из @item.FloorsInTheHouse</li>
                <li><span>Санузел</span><span>: </span>@item.Bathroom</li>
                <li><span>Ремонт</span><span>: </span>@item.Repair</li>
                <li><span>Мебель</span><span>: </span>@item.Furniture</li>
                <li><span>Техника</span><span>: </span>@item.Technique</li>
                <li><span>Интернет и ТВ</span><span>: </span>@item.InternetAndTV</li>
            </ul>

            <h2>Расположение</h2>
            <div>
                <span>@item.Address</span>
                @if (item.TimeToTheMetro != "не указано")
                {
                    <div>
                        <span>@item.Metro</span>
                        <span>@item.TimeToTheMetro</span>
                    </div>
                }
            </div>

            <h2>Описание</h2>
            <p>@item.Description</p>

            <h2>О доме</h2>
            <ul>
                <li><span>Тип дома</span><span>: </span>@item.HouseType</li>
                <li><span>Год постройки</span><span>: </span>@item.YearBuilt</li>
                <li><span></span>Этажей в доме<span>: </span>@item.FloorsInTheHouse</li>
                <li><span></span>Пассажирский лифт<span>: </span>@item.PassengerElevator</li>
                <li><span></span>Грузовой лифт<span>: </span>@item.FreightElevator</li>
                <li><span></span>Парковка<span>: </span>@item.Parking</li>
            </ul>
        </div>
    </div>
}
else if (notFound)
{
    <SectionContent SectionName="page-header-title">Not found</SectionContent>
    <div class="item-details">
        <p>Sorry, we couldn't find any such product.</p>
    </div>
}

@code {
    private CatalogItem? item;
    private int numInCart;
    private bool isLoggedIn;
    private bool notFound;

    [Parameter]
    public int ItemId { get; set; }

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoggedIn = HttpContext?.User.Identity?.IsAuthenticated == true;
            item = await CatalogService.GetCatalogItem(ItemId);
            await UpdateNumInCartAsync();
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            HttpContext!.Response.StatusCode = 404;
            notFound = true;
        }
    }

    private async Task AddToCartAsync()
    {
        if (!isLoggedIn)
        {
            Nav.NavigateTo(Pages.User.LogIn.Url(Nav));
            return;
        }

        if (item is not null)
        {
            await BasketState.AddAsync(item);
            await UpdateNumInCartAsync();
        }
    }

    private async Task UpdateNumInCartAsync()
    {
        var items = await BasketState.GetBasketItemsAsync();
        numInCart = items.FirstOrDefault(row => row.ProductId == ItemId)?.Quantity ?? 0;
    }
}
