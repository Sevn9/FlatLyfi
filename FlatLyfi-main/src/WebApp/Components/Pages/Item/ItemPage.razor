@page "/item/{itemId:int}"
@using System.Net
@inject CatalogService CatalogService
@inject BasketState BasketState
@inject NavigationManager Nav
@inject IProductImageUrlProvider ProductImages

@if (item is not null)
{
    <PageTitle>@item.Name | FlatLyfi</PageTitle>

    <div class="item-details">
        <div>
            <h1>@item.Name</h1>

            <div>
                <form class="add-to-cart" method="post" @formname="add-to-cart" @onsubmit="@AddToCartAsync" data-enhance="@isLoggedIn">
                    <AntiforgeryToken />
                    <span class="price">@item.Price&nbsp;₽</span>

                    @if (isLoggedIn)
                    {
                        <button type="submit" title="Добавить к сравнению">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path id="Vector" d="M6 2L3 6V20C3 20.5304 3.21071 21.0391 3.58579 21.4142C3.96086 21.7893 4.46957 22 5 22H19C19.5304 22 20.0391 21.7893 20.4142 21.4142C20.7893 21.0391 21 20.5304 21 20V6L18 2H6Z" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                <path id="Vector_2" d="M3 6H21" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                <path id="Vector_3" d="M16 10C16 11.0609 15.5786 12.0783 14.8284 12.8284C14.0783 13.5786 13.0609 14 12 14C10.9391 14 9.92172 13.5786 9.17157 12.8284C8.42143 12.0783 8 11.0609 8 10" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                            Добавить к сравнению
                        </button>
                    }
                    else
                    {
                        <button type="submit" title="Войдите, чтобы добавить к сравнению">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path d="M20 21V19C20 17.9391 19.5786 16.9217 18.8284 16.1716C18.0783 15.4214 17.0609 15 16 15H8C6.93913 15 5.92172 15.4214 5.17157 16.1716C4.42143 16.9217 4 17.9391 4 19V21" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                <path d="M12 11C14.2091 11 16 9.20914 16 7C16 4.79086 14.2091 3 12 3C9.79086 3 8 4.79086 8 7C8 9.20914 9.79086 11 12 11Z" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                            Войдите, чтобы добавить к сравнению
                        </button>
                    }
                </form>

                @if (numInCart > 0)
                {
                    <p><strong>@numInCart</strong> в <a href="cart">корзине сравнения</a></p>
                }
            </div>

            <img alt="@item.Name" src="@ProductImages.GetProductImageUrl(item)" />
           <div id="map" style="width: 600px; height: 400px"></div>
           <script>
    window.mapHint = '@item.Name'.replace(/'/g, "\\'");
    window.mapBalloon = '@item.Description'.replace(/'/g, "\\'");
    window.mapCenter = [@item.Latitude.ToString(System.Globalization.CultureInfo.InvariantCulture), @item.Longitude.ToString(System.Globalization.CultureInfo.InvariantCulture)];
</script>
	        <script src="https://api-maps.yandex.ru/2.1/?apikey=<API_KEY>&lang=ru_RU"> // Replace <API_KEY> with your actual Yandex Maps API key
	        </script>
	        <script src="yandex-map.js"></script>
        </div>

        <div class="description">
            <h2>О квартире</h2>
            <ul>
                <li><span>Количество комнат</span><span>: </span>@item.NumberOfRooms</li>
                <li>
                    <span>Общая площадь</span><span>: </span>@(item.TotalFloorArea == "не указано" ? "не указано" : item.TotalFloorArea + "\u00A0м²")
                </li>
                <li>
                    <span>Площадь кухни</span><span>: </span>@(item.KitchenArea == "не указано" ? "не указано" : item.KitchenArea + "\u00A0м²")
                </li>
                <li>
                    <span>Жилая площадь</span><span>: </span>@(item.LivingArea == "не указано" ? "не указано" : item.LivingArea + "\u00A0м²")
                </li>
                <li><span>Этаж</span><span>: </span>@item.Floor из @item.FloorsInTheHouse</li>
                <li><span>Санузел</span><span>: </span>@item.Bathroom</li>
                <li><span>Ремонт</span><span>: </span>@item.Repair</li>
                <li><span>Мебель</span><span>: </span>@item.Furniture</li>
                <li><span>Техника</span><span>: </span>@item.Technique</li>
                <li><span>Интернет и ТВ</span><span>: </span>@item.InternetAndTV</li>
            </ul>

            <h2>Расположение</h2>
            <div>
                <span>@item.Address</span>
                @if (item.TimeToTheMetro != "не указано")
                {
                    <div>
                        <span>@item.Metro</span>
                        <span>@item.TimeToTheMetro</span>
                    </div>
                }
            </div>

            <h2>Описание</h2>
            <p>@item.Description</p>

            <h2>О доме</h2>
            <ul>
                <li><span>Тип дома</span><span>: </span>@item.HouseType</li>
                <li><span>Год постройки</span><span>: </span>@item.YearBuilt</li>
                <li><span></span>Этажей в доме<span>: </span>@item.FloorsInTheHouse</li>
                <li><span></span>Пассажирский лифт<span>: </span>@item.PassengerElevator</li>
                <li><span></span>Грузовой лифт<span>: </span>@item.FreightElevator</li>
                <li><span></span>Парковка<span>: </span>@item.Parking</li>
            </ul>
        </div>
    </div>
}
else if (notFound)
{
    <SectionContent SectionName="page-header-title">Not found</SectionContent>
    <div class="item-details">
        <p>Sorry, we couldn't find any such product.</p>
    </div>
}

@code {
    private CatalogItem? item;
    private int numInCart;
    private bool isLoggedIn;
    private bool notFound;

    [Parameter]
    public int ItemId { get; set; }

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoggedIn = HttpContext?.User.Identity?.IsAuthenticated == true;
            item = await CatalogService.GetCatalogItem(ItemId);
            await UpdateNumInCartAsync();
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            HttpContext!.Response.StatusCode = 404;
            notFound = true;
        }
    }

    private async Task AddToCartAsync()
    {
        if (!isLoggedIn)
        {
            Nav.NavigateTo(Pages.User.LogIn.Url(Nav));
            return;
        }

        if (item is not null)
        {
            await BasketState.AddAsync(item);
            await UpdateNumInCartAsync();
        }
    }

    private async Task UpdateNumInCartAsync()
    {
        var items = await BasketState.GetBasketItemsAsync();
        numInCart = items.FirstOrDefault(row => row.ProductId == ItemId)?.Quantity ?? 0;
    }
}
